use fspiox_api::*;
use mojaloop_api::central_ledger::{participants, settlement_models};
use mojaloop_api::settlement::{settlement, settlement_windows};
use serde::{Deserialize, Serialize};

// Not *our* type, but it serves the same purpose: a client-generated ID with a low probability of
// collision when generated with a good source of randomness. This means the client can generate
// IDs in a pretty lazy fashion. Or indeed, it can use an incrementing integer.
// TODO: consider making this an untyped 128-bit binary field. The server actually doesn't care
// about the representation of this field, it never generates an id, so the tighter it packs, the
// better. We shouldn't even need to deserialize this..
pub type Id = CorrelationId;

#[cfg(feature = "typescript_types")]
use ts_rs::{TS, export};

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct TransferMessage {
    pub msg_sender: FspId,
    pub msg_recipient: FspId,
    pub currency: Currency,
    pub amount: Amount,
    // If we have the caller provide the transfer ID, we can use this as a unique message reference
    // for this message sequence with this caller.
    pub transfer_id: transfer::TransferId,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize, Clone, Copy)]
pub struct AccountInitialization {
    pub currency: Currency,
    pub initial_position: Amount,
    pub ndc: u32,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct SettlementWindowCloseMessage {
    pub id: settlement_windows::SettlementWindowId,
    pub reason: String,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct ClientMessage {
    // An ID to be generated by the client. When some event occurs as a result of a client request,
    // the server will notify the client of that event using the provided ID. Additionally, this
    // allows the client to send multiple requests before receiving any notification, and know in
    // the general case which notification/s correspond to which requests.
    pub id: Id,
    pub content: Request,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type", content = "value")]
pub enum Request {
    /// Run an end-to-end transfer
    Transfer(TransferMessage),
    /// Create hub settlement and reconciliation accounts
    CreateHubAccounts(Vec<participants::HubAccount>),
    // TODO: this _could_ be a vector of vectors of accounts. Each 0th-level vector would represent
    // a participant, and each 1st-level vector would contain desired accounts.
    // TODO: disable the participants on socket closure
    /// Create a set of participants. Will be disabled when the socket disconnects.
    CreateParticipants(Vec<AccountInitialization>),
    /// Create a settlement model
    CreateSettlementModel(settlement_models::SettlementModel),
    /// Attempt to close the currently open settlement window. Will fail if the window does not
    /// contain any transfers.
    CloseSettlementWindow(SettlementWindowCloseMessage),
    /// Get settlement windows
    GetSettlementWindows(settlement_windows::GetSettlementWindows),
    /// Get settlements
    GetSettlements(settlement::GetSettlements),
    /// Create settlement from settlement windows
    CreateSettlement(settlement::NewSettlement),
    // /// Generate some closed settlement windows with the given transfers. Will close the currently
    // /// open settlement window if that contains any existing transfers.
    // CreateSettlementWindows(Vec<Vec<TransferMessage>>),
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct SettlementModelCreatedMessage {
    pub settlement_model: settlement_models::SettlementModel,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct TransferCompleteMessage {
    pub id: transfer::TransferId,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct TransferErrorMessage {
    pub id: transfer::TransferId,
    pub response: ErrorResponse,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct ClientParticipant {
    pub name: FspId,
    pub account: AccountInitialization,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct SettlementWindowCloseFailedMessage {
    pub id: settlement_windows::SettlementWindowId,
    pub response: fspiox_api::ErrorResponse,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
pub struct ServerMessage {
    // id is optional, which allows the server to send broadcast/notification messages to the
    // client
    pub id: Option<Id>,
    pub content: Notification,
}

#[cfg_attr(feature = "typescript_types", derive(TS))]
#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type", content = "value")]
pub enum Notification {
    TransferPrepare(transfer::TransferPrepareRequestBody),
    TransferComplete(TransferCompleteMessage),
    TransferError(TransferErrorMessage),
    AssignParticipants(Vec<ClientParticipant>),
    HubAccountsCreated(Vec<participants::HubAccount>),
    SettlementModelCreated(SettlementModelCreatedMessage),
    SettlementWindowClosed(settlement_windows::SettlementWindowId),
    SettlementWindowCloseFailed(SettlementWindowCloseFailedMessage),
    SettlementWindows(Vec<settlement_windows::SettlementWindow>),
    Settlements(settlement::Settlements),
    NewSettlementCreated(settlement::Settlement),
}

#[cfg(feature = "typescript_types")]
export! {
    TransferCompleteMessage,
    TransferErrorMessage,
    AccountInitialization,
    ClientParticipant,
    TransferMessage,
    SettlementModelCreatedMessage,
    SettlementWindowCloseMessage,
    SettlementWindowCloseFailedMessage,
    settlement_windows::SettlementWindowState,
    settlement_windows::SettlementWindowContent,
    settlement_windows::SettlementWindow,
    settlement_windows::SettlementWindowId,
    settlement_windows::SettlementWindowContentId,
    settlement_windows::GetSettlementWindows,
    settlement_models::SettlementAccountType,
    settlement_models::SettlementDelay,
    settlement_models::SettlementGranularity,
    settlement_models::SettlementInterchange,
    settlement_models::LedgerAccountType,
    settlement_models::SettlementModel,
    settlement_models::SettlementModelName,
    settlement::GetSettlements,
    settlement::NewSettlement,
    settlement::SettlementSettlementWindow,
    settlement::Settlement,
    settlement::SettlementId,
    settlement::SettlementState,
    settlement::SettlementParticipant,
    settlement::SettlementAccount,
    settlement::ParticipantId,
    settlement::ParticipantCurrencyId,
    settlement::NetSettlementAmount,
    settlement::WindowParametersNewSettlement,
    participants::HubAccount,
    participants::HubAccountType,
    transfer::TransferPrepareRequestBody,
    transfer::IlpPacket,
    transfer::IlpCondition,
    transfer::TransferId,
    CorrelationId,
    Money,
    FspId,
    DateTime,
    Amount,
    Currency,
    ErrorResponse,
    ErrorInformation,
    MojaloopApiError,
    Request,
    Notification,
    ServerMessage,
    ClientMessage => "clients/typescript/src/lib/protocol.ts"
}
